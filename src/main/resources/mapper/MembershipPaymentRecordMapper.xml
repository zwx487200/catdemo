<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.catdemo.mapper.MembershipPaymentRecordMapper">

  <resultMap id="BaseResultMap" type="com.example.catdemo.entity.MembershipPaymentRecord">
    <id column="payment_id" jdbcType="VARCHAR" property="paymentId"/>
    <result column="user_id" jdbcType="VARCHAR" property="userId"/>
    <result column="membership_id" jdbcType="VARCHAR" property="membershipId"/>
    <result column="payment_amount" jdbcType="DECIMAL" property="paymentAmount"/>
    <result column="payment_date" jdbcType="TIMESTAMP" property="paymentDate"/>
    <result column="payment_status" jdbcType="INTEGER" property="paymentStatus"/>
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{ criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{ criterion.value} and #{ criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{ listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{ criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{ criterion.value} and #{ criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{ listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    payment_id, user_id, membership_id, payment_amount, payment_date, payment_status, created_at, 
	updated_at
  </sql>

  <select id="selectByExample" parameterType="com.example.catdemo.entity.MembershipPaymentRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from membership_payment_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from membership_payment_record
    where payment_id = #{paymentId,jdbcType=VARCHAR}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from membership_payment_record
    where payment_id = #{paymentId,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteByExample" parameterType="com.example.catdemo.entity.MembershipPaymentRecordExample">
    delete from membership_payment_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>

  <insert id="insert" parameterType="com.example.catdemo.entity.MembershipPaymentRecord">
    <selectKey keyProperty="paymentId" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into membership_payment_record(user_id, membership_id, payment_amount, 
	 payment_date, payment_status, created_at, updated_at)
    values (#{userId,jdbcType=VARCHAR}, #{membershipId,jdbcType=VARCHAR}, #{paymentAmount,jdbcType=DECIMAL}, 
	 #{paymentDate,jdbcType=TIMESTAMP}, #{paymentStatus,jdbcType=INTEGER}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP})
  </insert>

  <insert id="insertSelective" parameterType="com.example.catdemo.entity.MembershipPaymentRecord">
    <selectKey keyProperty="paymentId" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into membership_payment_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="membershipId != null">
        membership_id,
      </if>
      <if test="paymentAmount != null">
        payment_amount,
      </if>
      <if test="paymentDate != null">
        payment_date,
      </if>
      <if test="paymentStatus != null">
        payment_status,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="membershipId != null">
        #{membershipId,jdbcType=VARCHAR},
      </if>
      <if test="paymentAmount != null">
        #{paymentAmount,jdbcType=DECIMAL},
      </if>
      <if test="paymentDate != null">
        #{paymentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="paymentStatus != null">
        #{paymentStatus,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>

  <select id="countByExample" parameterType="com.example.catdemo.entity.MembershipPaymentRecordExample" resultType="java.lang.Long">
    select count(*) from membership_payment_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>

  <update id="updateByExampleSelective" parameterType="map">
    update membership_payment_record
    <set>
      <if test="record.paymentId != null">
       payment_id = #{record.paymentId,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
       user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.membershipId != null">
       membership_id = #{record.membershipId,jdbcType=VARCHAR},
      </if>
      <if test="record.paymentAmount != null">
       payment_amount = #{record.paymentAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.paymentDate != null">
       payment_date = #{record.paymentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.paymentStatus != null">
       payment_status = #{record.paymentStatus,jdbcType=INTEGER},
      </if>
      <if test="record.createdAt != null">
       created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
       updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="updateByExample" parameterType="map">
    update membership_payment_record
    set payment_id = #{record.paymentId,jdbcType=VARCHAR},
	  user_id = #{record.userId,jdbcType=VARCHAR},
	  membership_id = #{record.membershipId,jdbcType=VARCHAR},
	  payment_amount = #{record.paymentAmount,jdbcType=DECIMAL},
	  payment_date = #{record.paymentDate,jdbcType=TIMESTAMP},
	  payment_status = #{record.paymentStatus,jdbcType=INTEGER},
	  created_at = #{record.createdAt,jdbcType=TIMESTAMP},
	  updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="updateByPrimaryKeySelective" parameterType="com.example.catdemo.entity.MembershipPaymentRecord">
    update membership_payment_record
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="membershipId != null">
        membership_id = #{membershipId,jdbcType=VARCHAR},
      </if>
      <if test="paymentAmount != null">
        payment_amount = #{paymentAmount,jdbcType=DECIMAL},
      </if>
      <if test="paymentDate != null">
        payment_date = #{paymentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="paymentStatus != null">
        payment_status = #{paymentStatus,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where payment_id = #{paymentId,jdbcType=VARCHAR}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.example.catdemo.entity.MembershipPaymentRecord">
    update membership_payment_record
    set user_id = #{userId,jdbcType=VARCHAR},
	  membership_id = #{membershipId,jdbcType=VARCHAR},
	  payment_amount = #{paymentAmount,jdbcType=DECIMAL},
	  payment_date = #{paymentDate,jdbcType=TIMESTAMP},
	  payment_status = #{paymentStatus,jdbcType=INTEGER},
	  created_at = #{createdAt,jdbcType=TIMESTAMP},
	  updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where payment_id = #{paymentId,jdbcType=VARCHAR}
  </update>
</mapper>

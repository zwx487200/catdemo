<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.catdemo.mapper.MembershipLevelMapper">

  <resultMap id="BaseResultMap" type="com.example.catdemo.entity.MembershipLevel">
    <id column="level_id" jdbcType="VARCHAR" property="levelId"/>
    <result column="level" jdbcType="VARCHAR" property="level"/>
    <result column="level_name" jdbcType="VARCHAR" property="levelName"/>
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt"/>
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.catdemo.entity.MembershipLevel">
    <result column="level_description" jdbcType="LONGVARCHAR" property="levelDescription"/>
    <result column="level_benefits" jdbcType="LONGVARCHAR" property="levelBenefits"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{ criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{ criterion.value} and #{ criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{ listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{ criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{ criterion.value} and #{ criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{ listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    level,level_id, level_name, created_at, updated_at
  </sql>
  <sql id="Blob_Column_List">
    level_description, level_benefits
  </sql>

  <select id="selectByExampleWithBLOBs" parameterType="com.example.catdemo.entity.MembershipLevelExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from membership_level
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

  <select id="selectByExample" parameterType="com.example.catdemo.entity.MembershipLevelExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from membership_level
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
      order by level
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from membership_level
    where level_id = #{levelId,jdbcType=VARCHAR}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from membership_level
    where level_id = #{levelId,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteByExample" parameterType="com.example.catdemo.entity.MembershipLevelExample">
    delete from membership_level
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>

  <insert id="insert" parameterType="com.example.catdemo.entity.MembershipLevel">

    insert into membership_level(level_id, level_name, level_description, level_benefits,
	 created_at, updated_at)
    values (uuid(), #{levelName,jdbcType=VARCHAR}, #{levelDescription,jdbcType=LONGVARCHAR}, #{levelBenefits,jdbcType=LONGVARCHAR},
	 #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP})
  </insert>

  <insert id="insertSelective" parameterType="com.example.catdemo.entity.MembershipLevel">

    insert into membership_level
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="levelId != null">
      level_id,
      </if>
      <if test="levelName != null">
        level_name,
      </if>
      <if test="levelDescription != null">
        level_description,
      </if>
      <if test="levelBenefits != null">
        level_benefits,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="levelId != null">
        #{levelId,jdbcType=VARCHAR},
        </if>
      <if test="levelName != null">
        #{levelName,jdbcType=VARCHAR},
      </if>
      <if test="levelDescription != null">
        #{levelDescription,jdbcType=LONGVARCHAR},
      </if>
      <if test="levelBenefits != null">
        #{levelBenefits,jdbcType=LONGVARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>

  <select id="countByExample" parameterType="com.example.catdemo.entity.MembershipLevelExample" resultType="java.lang.Long">
    select count(*) from membership_level
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>

  <update id="updateByExampleSelective" parameterType="map">
    update membership_level
    <set>
      <if test="record.levelId != null">
       level_id = #{record.levelId,jdbcType=VARCHAR},
      </if>
      <if test="record.levelName != null">
       level_name = #{record.levelName,jdbcType=VARCHAR},
      </if>
      <if test="record.levelDescription != null">
       level_description = #{record.levelDescription,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.levelBenefits != null">
       level_benefits = #{record.levelBenefits,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.createdAt != null">
       created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
       updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="updateByExampleWithBLOBs" parameterType="map">
    update membership_level
    set level_id = #{record.levelId,jdbcType=VARCHAR},
	  level_name = #{record.levelName,jdbcType=VARCHAR},
	  level_description = #{record.levelDescription,jdbcType=LONGVARCHAR},
	  level_benefits = #{record.levelBenefits,jdbcType=LONGVARCHAR},
	  created_at = #{record.createdAt,jdbcType=TIMESTAMP},
	  updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="updateByExample" parameterType="map">
    update membership_level
    set level_id = #{record.levelId,jdbcType=VARCHAR},
	  level_name = #{record.levelName,jdbcType=VARCHAR},
	  created_at = #{record.createdAt,jdbcType=TIMESTAMP},
	  updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="updateByPrimaryKeySelective" parameterType="com.example.catdemo.entity.MembershipLevel">
    update membership_level
    <set>
      <if test="levelName != null">
        level_name = #{levelName,jdbcType=VARCHAR},
      </if>
      <if test="levelDescription != null">
        level_description = #{levelDescription,jdbcType=LONGVARCHAR},
      </if>
      <if test="levelBenefits != null">
        level_benefits = #{levelBenefits,jdbcType=LONGVARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where level_id = #{levelId,jdbcType=VARCHAR}
  </update>

  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.catdemo.entity.MembershipLevel">
    update membership_level
    set level_name = #{levelName,jdbcType=VARCHAR},
	  level_description = #{levelDescription,jdbcType=LONGVARCHAR},
	  level_benefits = #{levelBenefits,jdbcType=LONGVARCHAR},
	  created_at = #{createdAt,jdbcType=TIMESTAMP},
	  updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where level_id = #{levelId,jdbcType=VARCHAR}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.example.catdemo.entity.MembershipLevel">
    update membership_level
    set level_name = #{levelName,jdbcType=VARCHAR},
	  created_at = #{createdAt,jdbcType=TIMESTAMP},
	  updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where level_id = #{levelId,jdbcType=VARCHAR}
  </update>
</mapper>
